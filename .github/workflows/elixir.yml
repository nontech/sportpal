name: Elixir CI
run-name: Elixir CI is running tests

# Define workflow that runs when changes are pushed to the
# `main` branch or pushed to a PR branch that targets the `main`
# branch. Change the branch name if your project uses a
# different name for the main branch like "master" or "production".

on:
  push:
    branches: ["main"] # adapt branch for project
  pull_request:
    branches: ["main"] # adapt branch for project

# Sets the ENV `MIX_ENV` to `test` for running tests
env:
  MIX_ENV: test
  working-directory: ./backend

permissions:
  contents: read

jobs:
  run-test:
    runs-on: ubuntu-latest
    strategy:
      # Specify the OTP and Elixir versions to use when building
      # and running the workflow steps
      matrix:
        otp: ["22.0"] # Define the OTP version [required]
        elixir: ["1.12"] # Define the elixir version [required]

    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}

    # Set up a Postgres DB service. By default, Phoenix applications
    # use Postgres. This creates a database for running tests.
    # Additional services can be defined here if required
    services:
      db:
        image: postgres:latest
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sportpal_test

    steps:
      # Step: Setup Elixir + Erlang image as the base
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}

      # Step: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step: Download project dependencies. If unchanged, uses the cached version
      - name: Install dependencies
        working-directory: ${{ env.working-directory }}
        run: mix deps.get

      # Step: Execute the tests
      - name: Run tests
        working-directory: ${{ env.working-directory }}
        run: mix test

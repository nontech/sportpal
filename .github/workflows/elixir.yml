name: Elixir CI/CD
run-name: Elixir CI/CD Pipeline

# Define workflow that runs when changes are pushed to the
# `main` branch or pushed to a PR branch that targets the `main`
# branch. Change the branch name if your project uses a
# different name for the main branch like "master" or "production".

on:
  push:
    branches: ["main"] # adapt branch for project
  pull_request:
    branches: ["main"] # adapt branch for project

permissions:
  contents: read

jobs:
  compile_and_test:
    name: Compile & Test
    runs-on: ubuntu-22.04
    env:
      ELIXIR_VERSION: "1.14.0"
      OTP_VERSION: "25"
    services:
      db:
        image: postgres:latest
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: "trust"
          POSTGRES_DB: sporpal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Elixir
        uses: erlef/setup-beam@v1.16
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      - name: Install dependencies
        run: mix deps.get
      - name: Compile dependencies
        run: mix deps.compile
      - name: Compile
        run: mix compile
      - name: Setup database
        env:
          MIX_ENV: test
          PGHOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: mix ecto.drop
          mix ecto.create
          mix ecto.migrate
      - name: Run tests
        env:
          MIX_ENV: test
          PGHOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: mix test

  # deploy:
  #   needs: compile_and_test
  #   name: Deploy to Gigalixir
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set up Python 3.x
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.x"
  #     - name: Install gigalixir-cli
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y python3-pip
  #         pip install setuptools
  #         pip install gigalixir
  #     - name: Unshallow Repository
  #       run: git fetch --prune --unshallow
  #     - name: Push to Gigalixir
  #       run: |
  #         gigalixir login -e ${{ secrets.GIGALIXIR_EMAIL }} -p "${{ secrets.GIGALIXIR_PASSWORD }}" -y
  #         gigalixir git:remote ${{ secrets.GIGALIXIR_APP_NAME }}
  #         git push -f gigalixir HEAD:refs/heads/main
  #     - name: Migrate
  #       run: gigalixir run mix ecto.migrate
